{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  editProfileAvatar(avatar) {\n    return fetch(`${this._url}${'users/me/avatar'}`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getUserInfoFromServer() {\n    return fetch(`${this._url}${'users/me'}`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getAvatarFromServer() {\n    return fetch(`${this._url}${'users/me/avatar'}`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  setUserInfoOnServer(name, about) {\n    return fetch(`${this._url}${'users/me'}`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getCardsInformation() {\n    return fetch(`${this._url}${'cards'}`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  addCards(name, link) {\n    return fetch(`${this._url}${'cards'}`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}${'cards/'}${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId, like) {\n    return fetch(`${this._url}${'cards/likes/'}${cardId}`, {\n      method: like ? \"PUT\" : \"DELETE\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-18/\",\n  headers: {\n    \"Authorization\": \"6b4f0e7a-6b81-4fab-971b-4da07f00c7c0\",\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/vatc/Desktop/praktikum/react-mesto-auth/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","editProfileAvatar","avatar","fetch","method","body","JSON","stringify","then","res","ok","json","Promise","reject","status","getUserInfoFromServer","getAvatarFromServer","setUserInfoOnServer","name","about","getCardsInformation","addCards","link","deleteCard","cardId","changeLikeCardStatus","like","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n\n    editProfileAvatar(avatar) {\n        return fetch(`${this._url}${'users/me/avatar'}`, {\n            method: \"PATCH\",\n            headers: this._headers, \n            body: JSON.stringify({\n                avatar: avatar\n            })       \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            \n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    getUserInfoFromServer() {\n        return fetch(`${this._url}${'users/me'}`, {\n            method: \"GET\",\n            headers: this._headers        \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    getAvatarFromServer() {\n        return fetch(`${this._url}${'users/me/avatar'}`, {\n            method: \"GET\",\n            headers: this._headers        \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    setUserInfoOnServer(name, about) {\n        return fetch(`${this._url}${'users/me'}`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                about: about\n            })       \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            \n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    getCardsInformation() {\n        return fetch(`${this._url}${'cards'}`, {\n            method: \"GET\",\n            headers: this._headers        \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            \n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    addCards(name, link) {\n        return fetch(`${this._url}${'cards'}`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                link: link\n            })       \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}${'cards/'}${cardId}`, {\n            method: \"DELETE\",\n            headers: this._headers,   \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n\n    changeLikeCardStatus(cardId, like) {\n        return fetch(`${this._url}${'cards/likes/'}${cardId}`, {\n            method: like ? \"PUT\" : \"DELETE\",\n            headers: this._headers      \n        }).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        })\n    }\n\n}\n\n\n\nconst api = new Api({\n    url: \"https://mesto.nomoreparties.co/v1/cohort-18/\",\n    headers: {\n        \"Authorization\": \"6b4f0e7a-6b81-4fab-971b-4da07f00c7c0\",\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}