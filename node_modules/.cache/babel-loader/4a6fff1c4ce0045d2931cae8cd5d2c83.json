{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      console.log('Некорректно заполнено одно из полей');\n    }\n\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  }).then(res => {\n    return res;\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      console.log('Не передано одно из полей');\n    }\n\n    if (res.status === 401) {\n      console.log('Пользователь с email не найден ');\n    }\n\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  });\n};","map":{"version":3,"sources":["/Users/vatc/Desktop/praktikum/react-mesto-auth/react-mesto-auth/src/utils/Auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","status","console","log","ok","Promise","reject","json","authorize","getContent","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC7BK,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,OAAO,EAAE;AACT,gBAAU,kBADD;AAET,sBAAgB;AAFP,KAFoB;AAM7BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AANuB,GAAvB,CAAL,CAQJO,IARI,CAQEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AACD,QAAI,CAACH,GAAG,CAACI,EAAT,EAAa;AACT,aAAOC,OAAO,CAACC,MAAR,CAAgB,UAASN,GAAG,CAACC,MAAO,EAApC,CAAP;AACH;;AACD,WAAOD,GAAG,CAACO,IAAJ,EAAP;AACH,GAhBM,EAiBJR,IAjBI,CAiBEC,GAAD,IAAS;AACb,WAAOA,GAAP;AACD,GAnBI,CAAP;AAoBD,CArBM;AAuBP,OAAO,MAAMQ,SAAS,GAAG,CAACjB,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFsB;AAM/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AANyB,GAAvB,CAAL,CAQNO,IARM,CAQAC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;AACD,QAAIH,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD;;AACH,QAAI,CAACH,GAAG,CAACI,EAAT,EAAa;AACT,aAAOC,OAAO,CAACC,MAAR,CAAgB,UAASN,GAAG,CAACC,MAAO,EAApC,CAAP;AACH;;AACD,WAAOD,GAAG,CAACO,IAAJ,EAAP;AACH,GAnBQ,CAAP;AAoBH,CArBM;AAuBP,OAAO,MAAME,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOjB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASe,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNX,IARM,CAQDC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACI,EAAR,EAAY;AACV,aAAOJ,GAAG,CAACO,IAAJ,EAAP;AACD;;AACD,WAAOF,OAAO,CAACC,MAAR,CAAgB,WAAUN,GAAG,CAACC,MAAO,EAArC,CAAP;AACD,GAbM,CAAP;AAcD,CAfM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n        console.log('Некорректно заполнено одно из полей')\n      }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`)\n      }\n      return res.json()\n  })\n    .then((res) => {\n      return res\n    })\n}\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n          console.log('Не передано одно из полей')\n        }\n        if (res.status === 401) {\n          console.log('Пользователь с email не найден ')\n        }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`);\n      }\n      return res.json()\n  })\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n}\n\n"]},"metadata":{},"sourceType":"module"}