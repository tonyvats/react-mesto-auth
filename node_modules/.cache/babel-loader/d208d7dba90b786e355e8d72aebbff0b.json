{"ast":null,"code":"export var BASE_URL='https://auth.nomoreparties.co';export var register=function register(email,password){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){if(res.status===400){console.log('Некорректно заполнено одно из полей');}if(!res.ok){return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(res.status));}return res.json();}).then(function(res){return res;});};export var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Accept':'application/json',\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(function(res){if(res.status===400){console.log('Не передано одно из полей');}if(res.status===401){console.log('Пользователь с email не найден ');}if(!res.ok){return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(res.status));}return res.json();});};export var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)}}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));});};","map":{"version":3,"sources":["/Users/vatc/Desktop/praktikum/react-mesto-auth/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","status","console","log","ok","Promise","reject","json","authorize","getContent","token"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,+BAAjB,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CAC7BK,MAAM,CAAE,MADqB,CAE7BC,OAAO,CAAE,CACT,SAAU,kBADD,CAET,eAAgB,kBAFP,CAFoB,CAM7BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CANuB,CAAvB,CAAL,CAQJO,IARI,CAQC,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACtBC,OAAO,CAACC,GAAR,CAAY,qCAAZ,EACD,CACD,GAAI,CAACH,GAAG,CAACI,EAAT,CAAa,CACT,MAAOC,CAAAA,OAAO,CAACC,MAAR,gDAAyBN,GAAG,CAACC,MAA7B,EAAP,CACH,CACD,MAAOD,CAAAA,GAAG,CAACO,IAAJ,EAAP,CACH,CAhBM,EAiBJR,IAjBI,CAiBC,SAACC,GAAD,CAAS,CACb,MAAOA,CAAAA,GAAP,CACD,CAnBI,CAAP,CAoBD,CArBM,CAuBP,MAAO,IAAMQ,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACjB,KAAD,CAAQC,QAAR,CAAqB,CAC1C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CAC/BK,MAAM,CAAE,MADuB,CAE/BC,OAAO,CAAE,CACL,SAAU,kBADL,CAEL,eAAgB,kBAFX,CAFsB,CAM/BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CANyB,CAAvB,CAAL,CAQNO,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpBC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACD,CACD,GAAIH,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACtBC,OAAO,CAACC,GAAR,CAAY,iCAAZ,EACD,CACH,GAAI,CAACH,GAAG,CAACI,EAAT,CAAa,CACT,MAAOC,CAAAA,OAAO,CAACC,MAAR,gDAAyBN,GAAG,CAACC,MAA7B,EAAP,CACH,CACD,MAAOD,CAAAA,GAAG,CAACO,IAAJ,EAAP,CACH,CAnBQ,CAAP,CAoBH,CArBM,CAuBP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACnC,MAAOjB,CAAAA,KAAK,WAAIJ,QAAJ,cAAyB,CACnCK,MAAM,CAAE,KAD2B,CAEnCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAGP,iCAA2Be,KAA3B,CAHO,CAF0B,CAAzB,CAAL,CAQNX,IARM,CAQD,SAAAC,GAAG,CAAI,CACX,GAAIA,GAAG,CAACI,EAAR,CAAY,CACV,MAAOJ,CAAAA,GAAG,CAACO,IAAJ,EAAP,CACD,CACD,MAAOF,CAAAA,OAAO,CAACC,MAAR,iDAA0BN,GAAG,CAACC,MAA9B,EAAP,CACD,CAbM,CAAP,CAcD,CAfM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n        console.log('Некорректно заполнено одно из полей')\n      }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`)\n      }\n      return res.json()\n  })\n    .then((res) => {\n      return res\n    })\n}\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n          console.log('Не передано одно из полей')\n        }\n        if (res.status === 401) {\n          console.log('Пользователь с email не найден ')\n        }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`);\n      }\n      return res.json()\n  })\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n}\n\n"]},"metadata":{},"sourceType":"module"}