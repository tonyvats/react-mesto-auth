{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const checkStatus = res => {\n  if (res.ok) {\n    return res.json();\n  }\n\n  return Promise.reject(`Что-то пошло не так: ${res.status}`);\n};\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      console.log('Некорректно заполнено одно из полей');\n    }\n\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  }).then(res => {\n    return res;\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      console.log('Не передано одно из полей');\n    }\n\n    if (res.status === 401) {\n      console.log('Пользователь с email не найден ');\n    }\n\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.status === 401 && !res.token || res.status === 401 && !`Bearer ${token}`) {\n      console.log('Токен не передан или передан не в том формате');\n    }\n\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  }).then(res => {\n    return res;\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => checkStatus(res));\n};","map":{"version":3,"sources":["/Users/vatc/Desktop/praktikum/react-mesto-auth/react-mesto-auth/src/utils/Auth.js"],"names":["BASE_URL","checkStatus","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","console","log","authorize","getContent","token","checkToken","Authorization"],"mappings":"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","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const checkStatus = (res) => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Что-то пошло не так: ${res.status}`);\n};\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n        console.log('Некорректно заполнено одно из полей')\n      }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`)\n      }\n      return res.json()\n  })\n    .then((res) => {\n      return res\n    })\n}\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ email, password })\n    })\n    .then((res) => {\n      if (res.status === 400) {\n          console.log('Не передано одно из полей')\n        }\n        if (res.status === 401) {\n          console.log('Пользователь с email не найден ')\n        }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`);\n      }\n      return res.json()\n  })\n}\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            \"Content-Type\": \"application/json\",\n            \"Authorization\" : `Bearer ${token}`\n        }\n    })\n    .then((res) => {\n      if ((res.status === 401 && !res.token) || (res.status === 401 && !`Bearer ${token}`)) {\n          console.log('Токен не передан или передан не в том формате')\n        }\n      if (!res.ok) {\n          return Promise.reject(`Ошибка ${res.status}`)\n      }\n      return res.json()\n    })\n    .then((res) => {\n      return res\n    })\n}\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((res) => checkStatus(res));\n}"]},"metadata":{},"sourceType":"module"}